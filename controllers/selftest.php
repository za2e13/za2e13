<?php

/** This class provides the Self Testing functionality
 * YOU MUST NOT EDIT THIS CLASS
 */
class Selftest extends Controller {

	//Configuration
	public $testUsername = 'Testing';
	

	public $mock;
	public $comments = array();

	/** WARNING: DO NOT EDIT THIS FILE **/
	public $tests = array(
		array(
			'name' => 'Debug mode',
			'description' => '',
		),	
		array(
			'name' => 'Creating a new account',
			'description' => '',
		),
		array(
			'name' => 'Logging in as an account',
			'description' => '',
		),
		array(
			'name' => 'Logging out as an account',
			'description' => '',
		),	
		array(
			'name' => 'Creating a new post',
			'description' => '',
		),	
		array(
			'name' => 'Creating a new comment',
			'description' => '',
		),	
		array(
			'name' => 'Performing a search',
			'description' => '',
		),	
		array(
			'name' => 'Creating a page',
			'description' => '',
		),	
	array(
			'name' => 'Uploading a file',
			'description' => '',
		),	
	);

	public function index($f3) {
		$this->f3 = $f3;
		$this->mock = new Mock($f3);

		//Self test is only enabled in debug mode
		$settings = $this->Model->Settings;
		$debug = $settings->getSetting('debug');
		if(!$debug) {
			$f3->error('403');
			return false;
		}	

		//No user or not an admin
		if(empty($f3->get('SESSION.user.id')) || $f3->get('SESSION.user.level') < 2) {
			return $f3->reroute('/user/login');
		}

		//Start testing
		$this->mock->start();
		foreach($this->tests as $test_number=>$test) {
			$this->errors[$test_number] = '';
			$result = call_user_func(array($this,"test_$test_number"));
			$this->tests[$test_number]['result'] = $result;
			$this->tests[$test_number]['errors'] = $this->errors[$test_number];
		}
		$f3->set('tests',$this->tests);

		//End testing
		$this->mock->done();
		$this->f3->set('SESSION',$this->mock->session);
		$f3->set('session',$this->f3->get('SESSION'));
	}
	
	/** WARNING: DO NOT EDIT THIS FILE **/

	//Enabling debug mode
	private function test_0() {
		$settings = $this->Model->Settings;
		$debug = $settings->setSetting('debug',0);
		$disabled = $settings->getSetting('debug');
		$debug = $settings->setSetting('debug',1);
		$enabled = $settings->getSetting('debug');

		$fail = 0;
	  if ($disabled != 0) { $this->errors[0] .= 'Turning off debug mode did not disable debug mode correctly. '; $fail = 1; }
		if ($enabled != 1) { $this->errors[0] .= 'Turning on debug mode did not enable debug mode correctly. '; $fail = 1; }
		
		$output = $this->mock->run('Blog/index');
		if (!preg_match('!Debug mode is enabled!',$output)) { 
			$this->errors[0] .= 'The debug mode header is not present in debug mode. '; 
			$fail = 1; 
		} 

		return !$fail;
	}

	//Create account
	private function test_1() {
		//Find previous user and delete if not already existing
		$check = $this->Model->Users->fetch(array('username' => $this->testUsername));
		if(!empty($check)) {
			$check->erase();
		}

		$data = ['username' => $this->testUsername, 'password' => $this->testUsername, 'password2' => $this->testUsername, 'email' => $this->testUsername . '@localhost'];
		$output = $this->mock->run('User/add',$data);

		$fail = 0;
		if(!preg_match("!Registration complete!",$output)) {
			$this->errors[1] .= 'Registration form could not be submitted succesfully. ';
			$fail = 1;
		}

		$check = $this->Model->Users->fetch(array('username' => $this->testUsername));
		if(empty($check)) {
			$this->errors[1] .= 'Registration did not create new user. ';
			$fail = 1;
		} else {
			$check->erase();
		}

		return !$fail;
	}
	
	//Log in
	public function test_2() {
		$data = ['username' => 'admin', 'password' => 'admin']; 
		$output = $this->mock->run('User/login',$data);

		//Check admin login form
		$fail = 0;
		if(!preg_match("!Logged in succesfully!",$output)) {
			$this->errors[2] .= 'It was not possible to log in using admin:admin in debug mode. ';
			$fail = 1;	
		}

		$data = ['username' => $this->testUsername, 'password' => $this->testUsername, 'password2' => $this->testUsername, 'email' => $this->testUsername . '@localhost'];
		$output = $this->mock->run('User/add',$data);
		$check = $this->Model->Users->fetch(array('username' => $this->testUsername));
		if(empty($check)) {
			$this->errors[2] .= 'Registration did not create new user. ';
			$fail = 1;
		} 

		$data = ['username' => $this->testUsername, 'password' => $this->testUsername];
		$output = $this->mock->run('User/login',$data);

		//Check normal login form
		$fail = 0;
		if(!preg_match("!Logged in succesfully!",$output)) {
			$this->errors[2] .= 'It was not possible to log in using the log in form.';
			$fail = 1;	
		}

		//Check login function
		$result = $this->Auth->login($this->testUsername,$this->testUsername);
		if(!$result) {
			$this->errors[2] .= 'The login function in the AuthHelper did not log in a valid user. ';
			$fail = 1;	
		}

		//Check debug login function
		$result = $this->Auth->debugLogin($this->testUsername,$this->testUsername);
		if(!$result) {
			$this->errors[2] .= 'The debugLogin function in the AuthHelper did not log in a valid user. ';
			$fail = 1;	
		}

		//Check debug login function
		$result = $this->Auth->specialLogin($this->testUsername);
		if(!$result) {
			$this->errors[2] .= 'The specialLogin function in the AuthHelper did not log in a valid user. ';
			$fail = 1;	
		}

		//Remove dummy user
		if(!empty($check)) {
			$check->erase();
		}

		return !$fail;
	}
	
	//Log out
	public function test_3() {
		$output = $this->mock->run('User/logout');
		$fail = 0;
		if(!preg_match("!Logged out succesfully!",$output)) {
			$this->errors[3] .= 'The logout function did not work correctly. ';
			$fail = 1;
		}

		return !$fail;
	}
	
	//Create post
	public function test_4() {
		$data = array('title' => 'A test blog post', 'summary' => 'Hello Test World!', 'content' => 'Hello Test World!', 'published' => 0, 'Publish' => 'Publish');
		$output = $this->mock->run('Admin/Blog/add',$data);

		$fail = 0;
		if(!preg_match("!Post added succesfully!",$output)) {
			$this->errors[4] .= 'Unable to add a new post through the admin form. ';
			$fail = 1;
		}

		$check = $this->Model->Posts->fetch(array('title' => 'A test blog post'));
		if(empty($check)) {
			$this->errors[4] .= 'Unable to find the newly created post in the database. ';
			$fail = 1;
		}

		$output = $this->mock->run('Blog/index',$data);
		if(!preg_match("!Hello Test World!",$output)) {
			$this->errors[4] .= 'Unable to find the newly created post on the index. ';
			$fail = 1;
		}

		$allTests = $this->Model->Posts->fetchAll(array('title' => 'A test blog post'));
		foreach($allTests as $testPost) {
			$testPost->erase();
		}

		return !$fail;
	}
	
	//Create comment
	public function test_5() {

		$data = array('title' => 'A test blog post', 'summary' => 'Hello Test World!', 'content' => 'Hello Test World!', 'published' => 0, 'Publish' => 'Publish');
		$output = $this->mock->run('Admin/Blog/add',$data);

		$fail = 0;
		if(!preg_match("!Post added succesfully!",$output)) {
			$this->errors[5] .= 'Unable to add a new post through the admin form. ';
			$fail = 1;
		}

		$post = $this->Model->Posts->fetch(array('title' => 'A test blog post'));
		if(empty($post)) {
			$this->errors[5] .= 'Failed to create a new post and find it in the database. ';
			$fail = 1;
		}

		$admin = $this->Model->Users->fetch(array('username' => 'admin'));
		$data = array('subject' => 'This is my comment', 'message' => 'This is my message', 'user_id' => $admin->id);
		$output = $this->mock->run('Blog/comment/' . $post->id,$data);

		if(!preg_match("!Your comment has been posted!",$output)) {
			$this->errors[5] .= 'Unable to add a new comment through the new comment form. ';
			$fail = 1;		
		}

		$comment = $this->Model->Comments->fetch(array('subject' => 'This is my comment'));
		if(empty($comment)) {
			$this->errors[5] .= 'Unable to find new comment in the database. ';
			$fail = 1;		
		}

		if(!empty($comment)) {
			$post->erase();
			$comment->erase();
		}

		return !$fail;
	}
	
	//Perform search
	public function test_6() {
		$data = array('title' => 'Come and find me', 'summary' => 'Come and find me', 'content' => 'Come and find me', 'published' => 0, 'Publish' => 'Publish');
		$output = $this->mock->run('Admin/Blog/add',$data);

		$fail = 0;

		$data = array('search' => 'Come and find');
		$output = $this->mock->run('Blog/search',$data);
		if(!preg_match("!Come and find me!",$output)) {
			$this->errors[6] .= 'Unable to find a valid post using the search form. ';
			$fail = 1;
		}

		$allTests = $this->Model->Posts->fetchAll(array('title' => 'Come and find me'));
		foreach($allTests as $testPost) {
			$testPost->erase();
		}

		return !$fail;
	}

	//Creating a page
	public function test_7() {
		$fail = 0;

		$data = array('title' => 'Testing');
		$output = $this->mock->run('Admin/page/add',$data);
		if(!preg_match("!Page created succesfully!",$output)) {
			$this->errors[7] .= 'Unable to add a page through the admin interface. ';
			$fail = 1;			
		}

		$data = array('content' => 'This is a test');
		$output = $this->mock->run('Admin/page/edit/testing',$data);
		if(!preg_match("!Page updated succesfully!",$output)) {
			$this->errors[7] .= 'Unable to edit a page through the admin interface. ';
			$fail = 1;			
		}

		$output = $this->mock->run('Page/display/testing');
		if(!preg_match("!This is a test!",$output)) {
			$this->errors[7] .= 'Page was not succesfully created with given name and content. ';
			$fail = 1;			
		}

		if(file_exists(getcwd() . '/pages/testing.html')) {
			unlink(getcwd() . '/pages/testing.html');
		}

		return !$fail;
	}

	//Uploading a file
	public function test_8() {
		$fail = 0;
		$files = array('tmp_name' => getcwd () . '/uploads/rob1.jpg', 'name' => 'test.jpg');

		if(!file_exists(getcwd() . '/uploads/rob1.jpg')) {
			$fail = 1;
			$this->errors[8] .= 'Essential rob imagery is missing (uploads/rob.jpg). ';
		}
		
		$result = File::upload($files,true);

		if ($result === false || !preg_match("!uploads/test!",$result)) {
			$fail = 1;			
			$this->errors[8] .= 'Unable to upload file using the upload function. ';
		}

		if(file_exists(getcwd() . '/uploads/test.jpg')) {
			unlink(getcwd() . '/uploads/test.jpg');
		}

		return !$fail;
	}


}


?>

